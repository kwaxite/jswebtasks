
DOM - Document Object Model

The DOM (or Document Object Model) is a tree-like representation of the 
contents of a webpage - a tree of “nodes” with different relationships 
depending on how they’re arranged in the HTML document

1. TARGETING NODES WITH SELECTORS 

When working with the DOM, you use “selectors” to target the nodes you want to work with.

Examples of CSS-style selectors:

div.display
.display
#container > .display
div#container > div.display

2. RELATIONAL selectors
We can also use relationship selectors properties to target the nodes you want.
Examples

querySelector and querySelectorAll is the two you should use if possible
element.querySelector(selector) - returns a reference 
to the first match of selector.

element.querySelectorAll(selectors) - returns a “nodelist” containing 
references to all of the matches of the selectors.

const display = document.querySelector('.display')
// selects the div class display

const container = document.getElementById('container')
// select element by id

const controls = document.getElementsByClassName('controls')
// select element by class

const display = document.querySelector('.display')
console.log(display.nextElementSibling) 
// to identify the next sibling from current node. 
// can use .previousElementSibling to find previous element of a node

IMPORTANT - querySelectorAll
It’s important to note that when using querySelectorAll, the return value is not an array. 
It looks like an array, and it somewhat acts like an array, but it’s really a “nodelist”. 
The big distinction is that several array methods are missing from nodelists. 
One solution, if problems arise, is to convert the nodelist into an array. 
You can do this with Array.from() or the spread operator.

3. DOM METHODS

When your HTML code is parsed by a web browser, it is converted to the DOM as was mentioned above. 
One of the primary differences is that these nodes are objects that have many properties and 
methods attached to them. These properties and methods are the primary tools we are going to use 
to manipulate our webpage with JavaScript.

4. APPEND ELEMENTS

parentNode.appendChild(childNode) - appends childNode as the last child of parentNode.

parentNode.insertBefore(newNode, referenceNode) - inserts newNode into parentNode before referenceNode.

Remove elements
parentNode.removeChild(child) - removes child from parentNode on the DOM and returns a reference to child.

5 ADDING INLINE STYLE
See link for different kinds of styling ATTRIBUTES

https://domenlightenment.com/#6.2

Examples:
div.style.color = 'blue';                                      
// adds the indicated style rule

div.style.cssText = 'color: blue; background: white;';          
// adds several style rules

div.setAttribute('style', 'color: blue; background: white;');    
// adds several style rules

6. EDITING ATTRIBUTES

div.setAttribute('id', 'theDiv');                              
// if id exists, update it to 'theDiv', else create an id
// with value "theDiv"

div.getAttribute('id');                                        
// returns value of specified attribute, in this case
// "theDiv"

div.removeAttribute('id');                                     
// removes specified attribute

7 WORKING WITH CLASSES 

div.classList.add('new');                                      
// adds class "new" to your new div

div.classList.remove('new');                                   
// removes "new" class from div

div.classList.toggle('active');                                
// if div doesn't have class "active" then add it, or if
// it does, then remove it
It is often standard (and cleaner) to toggle a CSS style
rather than adding and removing inline CSS.